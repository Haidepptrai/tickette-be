name: tickette

networks:
  tickette-network:
    name: tickette-network
    external: true

services:
  tickette.api:
    image: ${DOCKER_REGISTRY-}ticketteapi
    container_name: tickette.api
    build:
      context: .
      dockerfile: Tickette.API/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tickette-network

  tickette.admin:
    image: ${DOCKER_REGISTRY-}ticketteadmin
    container_name: tickette.admin
    build:
      context: .
      dockerfile: Tickette.Admin/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tickette-network

  db:
    image: postgres:15
    container_name: local-database
    environment:
      POSTGRES_USER: HaiNguyen
      POSTGRES_PASSWORD: root
      POSTGRES_DB: tickette-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - tickette-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U HaiNguyen -d tickette-db"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:management
    container_name: local-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672" # RabbitMQ communication port
      - "15672:15672" # RabbitMQ Management UI port
    networks:
      - tickette-network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: local-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tickette-network
    command: ["redis-server", "--appendonly", "yes", "--notify-keyspace-events", "Ex"]

volumes:
  postgres_data:
  redis_data: